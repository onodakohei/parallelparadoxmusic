<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>{% if title %}{{ title }} · {% endif %}{{ site.name }}</title>
<meta name="description" content="{{ description or site.description }}">
<link rel="canonical" href="{{ (site.domain + page.url) | replace('//','/') }}">
<link href="{{ '/assets/css/main.css' | url }}" rel="stylesheet">
<script src="{{ '/assets/js/playlist-manager.js' | url }}?v=20241220120000" defer></script>
<script src="https://www.youtube.com/iframe_api"></script>
<meta property="og:type" content="website">
<meta property="og:title" content="{{ title or site.name }}">
<meta property="og:description" content="{{ description or site.description }}">
<meta property="og:url" content="{{ site.domain }}{{ page.url }}">
<meta property="og:image" content="{{ ogImage or '/assets/img/og-default.jpg' }}">
<meta name="twitter:card" content="summary_large_image">

<script>
// YouTubeプレイリストのランダム再生機能
function shufflePlaylist(playlistId, pageSlug) {
  const player = document.getElementById(`youtube-player-${pageSlug}`);
  if (player) {
    // プレイリストをシャッフルして再生開始
    const randomIndex = Math.floor(Math.random() * 50); // プレイリスト内のランダムな位置
    const newSrc = `https://www.youtube.com/embed/videoseries?list=${playlistId}&autoplay=1&loop=1&shuffle=1&index=${randomIndex}&modestbranding=1&rel=0`;
    
    player.src = newSrc;
    
    // ボタンの状態を更新
    updateButtonState(pageSlug, 'shuffle');
  }
}

function playRandomTrack(playlistId, pageSlug) {
  const player = document.getElementById(`youtube-player-${pageSlug}`);
  if (player) {
    // 完全にランダムなトラックを再生（ループなし）
    const randomIndex = Math.floor(Math.random() * 50);
    const newSrc = `https://www.youtube.com/embed/videoseries?list=${playlistId}&autoplay=1&loop=0&shuffle=0&index=${randomIndex}&modestbranding=1&rel=0`;
    
    player.src = newSrc;
    
    // ボタンの状態を更新
    updateButtonState(pageSlug, 'random');
  }
}

function playFromBeginning(playlistId, pageSlug) {
  const player = document.getElementById(`youtube-player-${pageSlug}`);
  if (player) {
    // プレイリストの最初から再生
    const newSrc = `https://www.youtube.com/embed/videoseries?list=${playlistId}&autoplay=1&loop=1&shuffle=0&index=0&modestbranding=1&rel=0`;
    
    player.src = newSrc;
    
    // ボタンの状態を更新
    updateButtonState(pageSlug, 'beginning');
  }
}

function updateButtonState(pageSlug, activeButton) {
  // すべてのボタンのアクティブ状態をリセット
  const buttons = document.querySelectorAll(`#youtube-player-${pageSlug}`).closest('.youtube-player').querySelectorAll('.btn');
  buttons.forEach(btn => btn.classList.remove('btn-active'));
  
  // アクティブなボタンにハイライトを追加
  const activeBtn = document.querySelector(`#youtube-player-${pageSlug}`).closest('.youtube-player').querySelector(`[data-action="${activeButton}"]`);
  if (activeBtn) {
    activeBtn.classList.add('btn-active');
  }
}

// 音声のみ再生モード
function playAudioOnly(playlistId) {
  const iframe = document.querySelector('iframe[src*="' + playlistId + '"]');
  if (iframe) {
    const currentSrc = iframe.src;
    const newSrc = currentSrc.replace(/autoplay=0/, 'autoplay=1') + '&modestbranding=1&rel=0&controls=1&disablekb=0&fs=0&iv_load_policy=3&cc_load_policy=0&autohide=1';
    iframe.src = newSrc;
    
    // プレイヤーを小さくして音声重視に
    iframe.style.height = '166px';
    iframe.style.borderRadius = '8px';
    iframe.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
  }
}

// ミニモード切り替え
function toggleMinimalMode() {
  const iframe = document.querySelector('iframe');
  if (iframe) {
    if (iframe.style.height === '166px') {
      iframe.style.height = '315px';
      iframe.style.borderRadius = '0';
      iframe.style.boxShadow = 'none';
    } else {
      iframe.style.height = '166px';
      iframe.style.borderRadius = '8px';
      iframe.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
    }
  }
}

// リンク表示モーダルを表示
function showLinksModal() {
  const modal = document.getElementById('links-modal');
  if (modal) {
    modal.classList.add('show');
    document.body.style.overflow = 'hidden';
  }
}

// リンク表示モーダルを非表示
function hideLinksModal() {
  const modal = document.getElementById('links-modal');
  if (modal) {
    modal.classList.remove('show');
    document.body.style.overflow = '';
  }
}

// プレイリスト選択モーダルを表示
function showPlaylistSelector() {
  const modal = document.getElementById('playlist-selector');
  if (modal) {
    modal.classList.add('show');
    document.body.style.overflow = 'hidden';
  }
}

// プレイリスト選択モーダルを非表示
function hidePlaylistSelector() {
  const modal = document.getElementById('playlist-selector');
  if (modal) {
    modal.classList.remove('show');
    document.body.style.overflow = '';
  }
}

// プレイリストを選択
function selectPlaylist(index) {
  if (index >= 0 && index < PLAYLISTS.length) {
    currentPlaylistIndex = index;
    updatePlaylistDisplay();
    hidePlaylistSelector();
  }
}

// 現在のプレイリストから再生
function playCurrentPlaylist() {
  // 現在のプレイリストIDを取得
  const currentPlaylistId = getCurrentPlaylistId();
  const currentPlaylistName = PLAYLISTS[currentPlaylistIndex].name;
  
  console.log('現在のプレイリストから再生:', currentPlaylistId, currentPlaylistName);
  
  // playRandomAudioを呼び出し
  playRandomAudio(currentPlaylistId, currentPlaylistName);
}

// トップページ用：音声のみランダム再生（プレイヤーは表示しない）
function playRandomAudio(playlistId, title) {
  // playlistManagerが利用可能になるまで待つ
  if (typeof playlistManager === 'undefined' || !playlistManager) {
    console.log('playlistManagerが利用できません。1秒後に再試行します...');
    setTimeout(() => playRandomAudio(playlistId, title), 1000);
    return;
  }
  
  // 渡されたプレイリストIDを使用（getCurrentPlaylistId()は使用しない）
  console.log('playRandomAudio 呼び出し:', playlistId, title);
  
  // 手動プレイリストからランダムな動画を取得
  const randomVideo = playlistManager.getRandomVideo(playlistId);
  if (!randomVideo) {
    console.error('動画が見つかりません');
    return;
  }

  console.log('ランダム動画取得:', randomVideo);

  // 音声再生用の隠しプレイヤーを作成
  let hiddenPlayer = document.getElementById('hidden-audio-player');
  if (!hiddenPlayer) {
    hiddenPlayer = document.createElement('iframe');
    hiddenPlayer.id = 'hidden-audio-player';
    hiddenPlayer.style.position = 'absolute';
    hiddenPlayer.style.left = '-9999px';
    hiddenPlayer.style.top = '-9999px';
    hiddenPlayer.style.width = '1px';
    hiddenPlayer.style.height = '1px';
    hiddenPlayer.style.opacity = '0';
    hiddenPlayer.style.pointerEvents = 'none';
    hiddenPlayer.allow = 'autoplay; encrypted-media';
    document.body.appendChild(hiddenPlayer);
  }

    // 従来のiframe方式で再生（音声が出ていた方式）
  console.log('iframe方式で再生開始');
  const audioUrl = `https://www.youtube.com/embed/${randomVideo.id}?autoplay=1&modestbranding=1&rel=0&controls=0&disablekb=1&fs=0&iv_load_policy=3&cc_load_policy=0&autohide=1&loop=0&mute=0`;
  console.log('iframe URL:', audioUrl);
  hiddenPlayer.src = audioUrl;
  
  // iframe方式で曲終了を検知（タイマーで監視）
  const videoDuration = 180; // 平均的な曲の長さ（秒）
  setTimeout(() => {
    console.log('タイマーによる曲終了検知。次の曲を再生します。');
    const currentPlaylistId = getCurrentPlaylistId();
    const currentPlaylistName = PLAYLISTS[currentPlaylistIndex].name;
    playRandomAudio(currentPlaylistId, currentPlaylistName);
  }, (videoDuration + 5) * 1000); // 5秒の余裕を持たせる

  // 背景を更新
  updateBackgroundThumbnail(randomVideo.id, randomVideo.thumbnail);

  console.log('音声再生開始:', randomVideo.title);
  
  // 曲名を更新
  updateCurrentSong(randomVideo.title);
  
  // プレイヤーの読み込み完了を監視
  hiddenPlayer.onload = function() {
    console.log('隠しプレイヤー読み込み完了');
  };
  
  // エラーハンドリング
  hiddenPlayer.onerror = function() {
    console.error('隠しプレイヤー読み込みエラー');
  };

  // 曲終了時のイベントリスナーを設定
  hiddenPlayer.addEventListener('ended', function() {
    console.log('曲が終了しました。次の曲を再生します。');
    // 現在のプレイリストから次の曲を再生
    const currentPlaylistId = getCurrentPlaylistId();
    const currentPlaylistName = PLAYLISTS[currentPlaylistIndex].name;
    playRandomAudio(currentPlaylistId, currentPlaylistName);
  });
}

// 曲名を更新する
function updateCurrentSong(songTitle) {
  const currentSongElement = document.getElementById('current-song');
  if (currentSongElement) {
    currentSongElement.textContent = songTitle;
    console.log('曲名を更新しました:', songTitle);
  } else {
    console.error('current-song要素が見つかりません');
  }
}

// 音声を停止する
function stopAudio() {
  const hiddenPlayer = document.getElementById('hidden-audio-player');
  if (hiddenPlayer) {
    hiddenPlayer.src = '';
    console.log('音声停止');
  }
  
  // 背景もリセット
  resetBackground();
}

// 背景を動画サムネイルに更新
function updateBackgroundThumbnail(videoId, thumbnailUrl) {
  // 背景要素を作成または更新
  let backgroundElement = document.getElementById('dynamic-background');
  if (!backgroundElement) {
    backgroundElement = document.createElement('div');
    backgroundElement.id = 'dynamic-background';
    backgroundElement.className = 'dynamic-background';
    document.body.appendChild(backgroundElement);
  }
  
  // 背景画像を設定
  backgroundElement.style.backgroundImage = `url(${thumbnailUrl})`;
  
  // フェードイン効果
  backgroundElement.style.opacity = '0';
  setTimeout(() => {
    backgroundElement.style.opacity = '1';
  }, 100);
}

// 背景を元に戻す
function resetBackground() {
  const backgroundElement = document.getElementById('dynamic-background');
  if (backgroundElement) {
    backgroundElement.style.opacity = '0';
    setTimeout(() => {
      backgroundElement.remove();
    }, 500);
  }

  // 隠しプレイヤーも停止
  const hiddenPlayer = document.getElementById('hidden-audio-player');
  if (hiddenPlayer) {
    hiddenPlayer.src = '';
  }
}

document.addEventListener('DOMContentLoaded', function() {
  console.log('DOMContentLoaded 開始');
  console.log('YT オブジェクトの状態:', typeof YT);
  
  // YouTubeプレイヤーの準備
  if (typeof YT !== 'undefined') {
    console.log('YouTube API 利用可能');
    YT.ready(function() {
      console.log('YouTube API ready');
    });
  } else {
    console.log('YouTube API 利用不可 - iframe方式で動作');
  }
  
  // プレイヤーの読み込み完了イベントを監視
  const players = document.querySelectorAll('iframe');
  players.forEach(player => {
    player.addEventListener('load', function() {
      console.log('YouTube player loaded');
    });
  });

  // モーダル外クリックで閉じる
  document.addEventListener('click', function(event) {
    const playlistModal = document.getElementById('playlist-selector');
    const linksModal = document.getElementById('links-modal');
    
    if (playlistModal && event.target === playlistModal) {
      hidePlaylistSelector();
    }
    
    if (linksModal && event.target === linksModal) {
      hideLinksModal();
    }
  });

  // ESCキーでモーダルを閉じる
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      hidePlaylistSelector();
      hideLinksModal();
    }
  });
});
</script>
